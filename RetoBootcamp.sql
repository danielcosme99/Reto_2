-- Creacion de tablas
CREATE TABLE Gerente (
    idGerente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descGerente VARCHAR2(100),
    fechaRegistro DATE DEFAULT CURRENT_DATE
);

CREATE TABLE Condicion (
    idCondicion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descCondicion VARCHAR2(100),
    fechaRegistro DATE DEFAULT CURRENT_DATE
);

CREATE TABLE Provincia (
    idProvincia NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descProvincia VARCHAR2(100),
    fechaRegistro DATE DEFAULT CURRENT_DATE
);

CREATE TABLE Sede (
    idSede NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descSede VARCHAR2(100),
    fechaRegistro DATE DEFAULT CURRENT_DATE
);

CREATE TABLE Distrito (
    idDistrito NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idProvincia NUMBER,
    descDistrito VARCHAR2(100),
    fechaRegistro DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (idProvincia) REFERENCES Provincia(idProvincia)
);

--TABLA PRINCIPAL HOSPITAL
CREATE TABLE Hospital (
    idHospital NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idDistrito NUMBER,
    Nombre VARCHAR2(100),
    Antiguedad NUMBER,
    Area NUMBER,
    idSede NUMBER,
    idGerente NUMBER,
    idCondicion NUMBER,
    fechaRegistro DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (idDistrito) REFERENCES Distrito(idDistrito),
    FOREIGN KEY (idSede) REFERENCES Sede(idSede),
    FOREIGN KEY (idGerente) REFERENCES Gerente(idGerente),
    FOREIGN KEY (idCondicion) REFERENCES Condicion(idCondicion)
);


---Insert en las tablas
INSERT INTO Gerente (descGerente) VALUES ('Jorge Juan Fuster');
INSERT INTO Gerente (descGerente) VALUES ('Demetrio Abellan');
INSERT INTO Gerente (descGerente) VALUES ('Saul Ferrando');
INSERT INTO Gerente (descGerente) VALUES ('Josep Trujillo');
INSERT INTO Gerente (descGerente) VALUES ('Victoria Palacio');
INSERT INTO Gerente (descGerente) VALUES ('Jose Enrique Rueda');
INSERT INTO Gerente (descGerente) VALUES ('Yanira Gallego');
INSERT INTO Gerente (descGerente) VALUES ('Marcelino Paz');
INSERT INTO Gerente (descGerente) VALUES ('Alma Salazar');
INSERT INTO Gerente (descGerente) VALUES ('Luis Enrique Pallares');

INSERT INTO Condicion (descCondicion) VALUES ('Operativo');  
INSERT INTO Condicion (descCondicion) VALUES ('En Mantenimiento');  
INSERT INTO Condicion (descCondicion) VALUES ('Cerrado Temporalmente');  
INSERT INTO Condicion (descCondicion) VALUES ('Clausurado');  
INSERT INTO Condicion (descCondicion) VALUES ('En Remodelación');  

INSERT INTO Provincia (descProvincia) VALUES ('LIMA');
INSERT INTO Provincia (descProvincia) VALUES ('BARRANCA');
INSERT INTO Provincia (descProvincia) VALUES ('CAJATAMBO');
INSERT INTO Provincia (descProvincia) VALUES ('CANTA');
INSERT INTO Provincia (descProvincia) VALUES ('CAÑETE');
INSERT INTO Provincia (descProvincia) VALUES ('HUARAL');
INSERT INTO Provincia (descProvincia) VALUES ('HUAROCHIRI');
INSERT INTO Provincia (descProvincia) VALUES ('HUAURA');
INSERT INTO Provincia (descProvincia) VALUES ('OYON');
INSERT INTO Provincia (descProvincia) VALUES ('YAUYOS');

INSERT INTO Sede (descSede) VALUES ('Sede Central');  
INSERT INTO Sede (descSede) VALUES ('Sede Regional Norte');  
INSERT INTO Sede (descSede) VALUES ('Sede Regional Sur');  
INSERT INTO Sede (descSede) VALUES ('Sede Provincial');  
INSERT INTO Sede (descSede) VALUES ('Sede Metropolitana');  

INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'ANCON');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'ATE');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'BARRANCO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'BREÑA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'CARABAYLLO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'CHORRILLOS');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'COMAS');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'EL AGUSTINO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'INDEPENDENCIA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'JESUS MARIA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'LA MOLINA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'LA VICTORIA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'LINCE');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'LOS OLIVOS');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'MIRAFLORES');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'PACHACAMAC');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'PUENTE PIEDRA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'RIMAC');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SAN BORJA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SAN ISIDRO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SAN JUAN DE LURIGANCHO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SAN JUAN DE MIRAFLORES');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SAN LUIS');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SAN MARTIN DE PORRES');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SAN MIGUEL');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SANTA ANITA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SANTIAGO DE SURCO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'SURQUILLO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'VILLA EL SALVADOR');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (1, 'VILLA MARIA DEL TRIUNFO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (2, 'PARAMONGA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (2, 'PATIVILCA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (2, 'SUPE');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (3, 'COPA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (3, 'GORGOR');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (3, 'HUANCAPON');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (3, 'MANAS');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (4, 'ARAHUAY');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (4, 'HUAMANTANGA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (4, 'HUAROS');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (4, 'LACHAQUI');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (5, 'SAN VICENTE DE CAÑETE');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (5, 'ASIA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (5, 'CALANGO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (5, 'CERRO AZUL');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (5, 'CHILCA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (6, 'CHANCAY');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (6, 'AUCALLAMA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (7, 'MATUCANA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (7, 'ANTIOQUIA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (8, 'HUACHO');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (8, 'SAYAN');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (8, 'VEGUETA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (9, 'ANDAJES');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (9, 'COCHAMARCA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (10, 'AYAUCA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (10, 'HUANCAYA');
INSERT INTO Distrito (idProvincia, descDistrito) VALUES (10, 'TANTA');

--Creacion de procedures y funciones
-- Funcion para generar lineas
/
CREATE OR REPLACE FUNCTION GENERAR_LINEA(p_longitud NUMBER) RETURN VARCHAR2 IS
    v_linea VARCHAR2(4000); 
BEGIN
    v_linea := RPAD('-', p_longitud, '-');
    RETURN v_linea;
END GENERAR_LINEA;
/
--Funcion para verificar existencia de un registro
CREATE OR REPLACE FUNCTION REGISTRO_EXISTE_ID(
    p_tabla      IN VARCHAR2,  -- Nombre de la tabla
    p_campo      IN VARCHAR2,  -- Nombre del campo ID
    p_id         IN NUMBER     -- ID a verificar
) RETURN NUMBER IS
    v_count NUMBER;
    v_sql   VARCHAR2(2000);
BEGIN
    -- Consulta dinámica
    v_sql := 'SELECT COUNT(*) FROM ' || p_tabla || ' WHERE ' || p_campo || ' = :1';
    
    -- Ejecutar la consulta
    EXECUTE IMMEDIATE v_sql INTO v_count USING p_id;

    -- Devolvera 1 si existe, 0 si no existe
    RETURN v_count;
END REGISTRO_EXISTE_ID;

/
--PROCEDURE PARA REGISTRAR UN NUEVO HOSPITAL
create or replace PROCEDURE SP_HOSPITAL_REGISTRAR (
    p_idDistrito  IN HOSPITAL.IDDISTRITO%TYPE,
    p_nombre      IN HOSPITAL.NOMBRE%TYPE,
    p_antiguedad  IN HOSPITAL.ANTIGUEDAD%TYPE,
    p_area        IN HOSPITAL.AREA%TYPE,
    p_idSede      IN HOSPITAL.IDSEDE%TYPE,
    p_idGerente   IN HOSPITAL.IDGERENTE%TYPE,
    p_idCondicion IN HOSPITAL.IDCONDICION%TYPE
) IS
    falta_parametros EXCEPTION;
    nombre_invalido EXCEPTION;
    valor_negativo EXCEPTION;
    validacion EXCEPTION;
    v_errores VARCHAR2(500) := '';
    
BEGIN
        -- Validar que los parametros no sean nulos
        IF p_idDistrito IS NULL OR p_nombre IS NULL OR
           p_antiguedad IS NULL OR p_area IS NULL OR p_idSede IS NULL OR
           p_idGerente IS NULL OR p_idCondicion IS NULL THEN
            RAISE falta_parametros;
        END IF;
        -- Validar que el nombre del hospital no sea espacios en blanco
        IF TRIM(p_nombre) IS NULL THEN
            RAISE nombre_invalido; 
        END IF; 
        -- Validar que antigüedad y área sean valores positivos
        IF p_antiguedad < 0 OR p_area <= 0 THEN
            RAISE valor_negativo;
        END IF;
        
        -- Verificar la existencia de los valores referenciados
        IF REGISTRO_EXISTE_ID('DISTRITO', 'IDDISTRITO', p_idDistrito) = 0 THEN
            v_errores := v_errores || 'Error: El distrito con ID ' || p_idDistrito || ' no existe.' || CHR(10);
        END IF;
        
        IF REGISTRO_EXISTE_ID('SEDE', 'IDSEDE', p_idSede) = 0 THEN
            v_errores := v_errores || 'Error: La sede con ID ' || p_idSede || ' no existe.' || CHR(10);
        END IF;
        
        IF REGISTRO_EXISTE_ID('GERENTE', 'IDGERENTE', p_idGerente) = 0 THEN
            v_errores := v_errores || 'Error: El gerente con ID ' || p_idGerente || ' no existe.' || CHR(10);
        END IF;
        
        IF REGISTRO_EXISTE_ID('CONDICION', 'IDCONDICION', p_idCondicion) = 0 THEN
            v_errores := v_errores || 'Error: La condición con ID ' || p_idCondicion || ' no existe.' || CHR(10);
        END IF;
            
        IF v_errores IS NOT NULL THEN
            RAISE validacion;
        END IF;

        -- Si todos los valores existen, se inserta el nuevo registro
        INSERT INTO HOSPITAL ( 
            IDDISTRITO, 
            NOMBRE, 
            ANTIGUEDAD, 
            AREA, 
            IDSEDE, 
            IDGERENTE, 
            IDCONDICION, 
            FECHAREGISTRO
        ) VALUES ( 
            p_idDistrito, 
            TRIM(p_nombre),
            p_antiguedad, 
            p_area, 
            p_idSede, 
            p_idGerente, 
            p_idCondicion, 
            CURRENT_DATE
        );
        DBMS_OUTPUT.PUT_LINE('✅ Hospital registrado exitosamente.');

EXCEPTION
    WHEN falta_parametros THEN
        DBMS_OUTPUT.PUT_LINE('Error: Faltan uno o más parametros de entrada');
    WHEN nombre_invalido THEN
        DBMS_OUTPUT.PUT_LINE('Error: El nombre del hospital no puede estar vacío.');
    WHEN valor_negativo THEN
        DBMS_OUTPUT.PUT_LINE('Error: La antigüedad y el área deben ser valores positivos.');
    WHEN validacion THEN
        DBMS_OUTPUT.PUT_LINE(v_errores);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar el hospital, por favor intente nuevamente.');
END SP_HOSPITAL_REGISTRAR;

/
--PROCEDURE PARA ACTUALIZAR DATOS DE UN HOSPITAL EXISTENTE
CREATE OR REPLACE PROCEDURE SP_HOSPITAL_ACTUALIZAR (
    p_idHospital  IN HOSPITAL.IDHOSPITAL%TYPE,
    p_idDistrito  IN HOSPITAL.IDDISTRITO%TYPE,
    p_nombre      IN HOSPITAL.NOMBRE%TYPE,
    p_antiguedad  IN HOSPITAL.ANTIGUEDAD%TYPE,
    p_area        IN HOSPITAL.AREA%TYPE,
    p_idSede      IN HOSPITAL.IDSEDE%TYPE,
    p_idGerente   IN HOSPITAL.IDGERENTE%TYPE,
    p_idCondicion IN HOSPITAL.IDCONDICION%TYPE
) IS
    falta_parametros EXCEPTION;
    hospital_existe EXCEPTION;
    nombre_invalido EXCEPTION;
    valor_negativo EXCEPTION;
    validacion EXCEPTION;
    v_errores VARCHAR2(500) := '';
    verificar_actualizacion EXCEPTION;

BEGIN
    -- Validar que los parametros no sean nulos
    IF p_idHospital IS NULL OR p_idDistrito IS NULL OR p_nombre IS NULL OR
        p_antiguedad IS NULL OR p_area IS NULL OR p_idSede IS NULL OR
        p_idGerente IS NULL OR p_idCondicion IS NULL THEN
        RAISE falta_parametros;
    END IF;
    -- Verificar si el hospital existe
    IF REGISTRO_EXISTE_ID('HOSPITAL', 'IDHOSPITAL', p_idHospital) = 0 THEN
        RAISE hospital_existe;
    END IF;
    -- Validar que el nombre del hospital no sea espacios en blanco
    IF TRIM(p_nombre) IS NULL THEN
        RAISE nombre_invalido;
    END IF;
    -- Validar que antigüedad y área sean valores positivos
    IF p_antiguedad < 0 OR p_area <= 0 THEN
        RAISE valor_negativo;
    END IF;
    -- Validar existencia de claves foráneas antes de actualizar
    IF REGISTRO_EXISTE_ID('DISTRITO', 'IDDISTRITO', p_idDistrito) = 0 THEN
        v_errores := v_errores || 'Error: El distrito con ID ' || p_idDistrito || ' no existe. ' || CHR(10);
    END IF;

    IF REGISTRO_EXISTE_ID('SEDE', 'IDSEDE', p_idSede) = 0 THEN
        v_errores := v_errores || 'Error: La sede con ID ' || p_idSede || ' no existe. ' || CHR(10);
    END IF;

    IF REGISTRO_EXISTE_ID('GERENTE', 'IDGERENTE', p_idGerente) = 0 THEN
        v_errores := v_errores || 'Error: El gerente con ID ' || p_idGerente || ' no existe. ' || CHR(10);
    END IF;

    IF REGISTRO_EXISTE_ID('CONDICION', 'IDCONDICION', p_idCondicion) = 0 THEN
        v_errores := v_errores || 'Error: La condición con ID ' || p_idCondicion || ' no existe. ' || CHR(10);
    END IF;

    -- Si hay errores, lanzar excepción
    IF v_errores IS NOT NULL THEN
        RAISE validacion;
    END IF;

    -- Actualizar los datos del hospital
    UPDATE HOSPITAL
    SET IDDISTRITO = p_idDistrito,
        NOMBRE = TRIM(p_nombre), 
        ANTIGUEDAD = p_antiguedad,
        AREA = p_area,
        IDSEDE = p_idSede,
        IDGERENTE = p_idGerente,
        IDCONDICION = p_idCondicion
    WHERE IDHOSPITAL = p_idHospital;

    -- Verificar si no se afectó alguna fila
    IF SQL%ROWCOUNT = 0 THEN
        RAISE verificar_actualizacion;
    END IF;

    DBMS_OUTPUT.PUT_LINE('✅ Datos del Hospital actualizados exitosamente.');

EXCEPTION
    WHEN falta_parametros THEN
        DBMS_OUTPUT.PUT_LINE('Error: Faltan uno o más parametros de entrada');
    WHEN hospital_existe THEN
        DBMS_OUTPUT.PUT_LINE('Error: El hospital con ID ' || p_idHospital || ' no existe en la Base de Datos.');
    WHEN nombre_invalido THEN
        DBMS_OUTPUT.PUT_LINE('Error: El nombre del hospital no puede estar vacío.');
    WHEN valor_negativo THEN
        DBMS_OUTPUT.PUT_LINE('Error: La antigüedad y el área deben ser valores positivos.');
    WHEN validacion THEN
        DBMS_OUTPUT.PUT_LINE(v_errores);
    WHEN verificar_actualizacion THEN
        DBMS_OUTPUT.PUT_LINE('Error: No se actualizaron los datos del hospital. Vuelva a intentar.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado al actualizar datos del hospital: ' || SQLERRM);
END SP_HOSPITAL_ACTUALIZAR;

/
--PROCEDURE PARA ELIMINAR UN REGISTRO DE LA TABLA HOSPITAL
CREATE OR REPLACE PROCEDURE SP_HOSPITAL_ELIMINAR (
    p_idHospital IN HOSPITAL.IDHOSPITAL%TYPE
) IS
    id_null EXCEPTION;
    hospital_existe EXCEPTION;
    verificar_eliminacion EXCEPTION;
BEGIN
    -- Validar que el ID del hospital no sea NULL
    IF p_idHospital IS NULL THEN
        RAISE id_null;
    END IF;

    --Verificar si el hospital existe
    IF REGISTRO_EXISTE_ID('HOSPITAL', 'IDHOSPITAL', p_idHospital) = 0 THEN
        RAISE hospital_existe;
    END IF;

    -- Eliminar el hospital
    DELETE FROM HOSPITAL WHERE IDHOSPITAL = p_idHospital;

    -- Verificar si se eliminó correctamente
    IF SQL%ROWCOUNT = 0 THEN
        RAISE verificar_eliminacion;
    END IF;
    DBMS_OUTPUT.PUT_LINE('✅ Hospital eliminado exitosamente.');

EXCEPTION
    WHEN id_null THEN
        DBMS_OUTPUT.PUT_LINE('Error: Debe proporcionar un ID de hospital.');
    WHEN hospital_existe THEN
        DBMS_OUTPUT.PUT_LINE('Error: El hospital con ID ' || p_idHospital || ' no existe en la Base de Datos.');
    WHEN verificar_eliminacion THEN
        DBMS_OUTPUT.PUT_LINE('Error: No se pudo eliminar el hospital. Vuelva a intentar.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado al eliminar el hospital: ' || SQLERRM);
END SP_HOSPITAL_ELIMINAR;

/
--PROCEDURE PARA LISTAR LOS REGISTROS DE LA TABLA HOSPITAL
CREATE OR REPLACE PROCEDURE SP_HOSPITAL_LISTAR(p_cursor OUT SYS_REFCURSOR) IS 
BEGIN
    -- Abrir cursor y devolverlo como salida
    OPEN p_cursor FOR 
        SELECT 
            h.IDHOSPITAL, 
            h.NOMBRE, 
            h.ANTIGUEDAD, 
            h.AREA, 
            d.DESCDISTRITO AS DISTRITO, 
            s.DESCSede AS SEDE, 
            g.DESCGerente AS GERENTE, 
            c.DESCCONDICION AS CONDICION, 
            h.FECHAREGISTRO
        FROM HOSPITAL h
        JOIN DISTRITO d ON h.IDDISTRITO = d.IDDISTRITO
        JOIN SEDE s ON h.IDSEDE = s.IDSEDE
        JOIN GERENTE g ON h.IDGERENTE = g.IDGERENTE
        JOIN CONDICION c ON h.IDCONDICION = c.IDCONDICION;
        
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('❌ Error al listar hospitales: ' || SQLERRM);
END SP_HOSPITAL_LISTAR;
/
--procedures para las otras tablas--
-- PROCEDURE PARA LISTAR GERENTES
CREATE OR REPLACE PROCEDURE SP_GERENTE_LISTAR(p_cursor OUT SYS_REFCURSOR) IS 
BEGIN
    OPEN p_cursor FOR 
        SELECT idGerente, descGerente, fechaRegistro FROM Gerente;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('❌ Error al listar gerentes: ' || SQLERRM);
END SP_GERENTE_LISTAR;
/
-- PROCEDURE PARA REGISTRAR GERENTE
CREATE OR REPLACE PROCEDURE SP_GERENTE_REGISTRAR(
    p_descGerente IN Gerente.descGerente%TYPE
) IS
BEGIN
    IF TRIM(p_descGerente) IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Error: La descripción del gerente no puede estar vacía.');
        RETURN;
    END IF;
    
    INSERT INTO Gerente (descGerente, fechaRegistro) VALUES (TRIM(p_descGerente), CURRENT_DATE);
    DBMS_OUTPUT.PUT_LINE('✅ Gerente registrado exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado al registrar gerente: ' || SQLERRM);
END SP_GERENTE_REGISTRAR;
/
-- PROCEDURE PARA ACTUALIZAR GERENTE
CREATE OR REPLACE PROCEDURE SP_GERENTE_ACTUALIZAR(
    p_idGerente IN Gerente.idGerente%TYPE,
    p_descGerente IN Gerente.descGerente%TYPE
) IS
BEGIN
    IF p_idGerente IS NULL OR TRIM(p_descGerente) IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Error: ID de gerente y descripción no pueden ser nulos.');
        RETURN;
    END IF;
    
    UPDATE Gerente SET descGerente = TRIM(p_descGerente) WHERE idGerente = p_idGerente;
    IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: No se encontró el gerente con ID ' || p_idGerente);
    ELSE
        DBMS_OUTPUT.PUT_LINE('✅ Gerente actualizado exitosamente.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado al actualizar gerente: ' || SQLERRM);
END SP_GERENTE_ACTUALIZAR;
/
-- PROCEDURE PARA ELIMINAR GERENTE
CREATE OR REPLACE PROCEDURE SP_GERENTE_ELIMINAR(
    p_idGerente IN Gerente.idGerente%TYPE
) IS
BEGIN
    IF p_idGerente IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Error: Debe proporcionar un ID de gerente.');
        RETURN;
    END IF;
    
    DELETE FROM Gerente WHERE idGerente = p_idGerente;
    IF SQL%ROWCOUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Error: No se encontró el gerente con ID ' || p_idGerente);
    ELSE
        DBMS_OUTPUT.PUT_LINE('✅ Gerente eliminado exitosamente.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado al eliminar gerente: ' || SQLERRM);
END SP_GERENTE_ELIMINAR;
/
-- PROCEDIMIENTO PARA LISTAR TODAS LAS CONDICIONES
CREATE OR REPLACE PROCEDURE SP_CONDICION_LISTAR(p_cursor OUT SYS_REFCURSOR) IS 
BEGIN
    OPEN p_cursor FOR 
        SELECT IDCONDICION, DESCCONDICION, FECHAREGISTRO 
        FROM CONDICION;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('❌ Error al listar condiciones: ' || SQLERRM);
END SP_CONDICION_LISTAR;
/

-- PROCEDIMIENTO PARA REGISTRAR UNA NUEVA CONDICIÓN
CREATE OR REPLACE PROCEDURE SP_CONDICION_REGISTRAR(
    p_descCondicion IN CONDICION.DESCCONDICION%TYPE
) IS
    falta_parametros EXCEPTION;
    nombre_invalido EXCEPTION;
BEGIN
    -- Validar que la descripción no sea nula o vacía
    IF p_descCondicion IS NULL OR TRIM(p_descCondicion) IS NULL THEN
        RAISE falta_parametros;
    END IF;
    
    -- Insertar nueva condición
    INSERT INTO CONDICION (DESCCONDICION, FECHAREGISTRO) 
    VALUES (TRIM(p_descCondicion), CURRENT_DATE);
    
    DBMS_OUTPUT.PUT_LINE('✅ Condición registrada exitosamente.');
EXCEPTION
    WHEN falta_parametros THEN
        DBMS_OUTPUT.PUT_LINE('Error: La descripción de la condición no puede estar vacía.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar la condición: ' || SQLERRM);
END SP_CONDICION_REGISTRAR;
/

-- PROCEDIMIENTO PARA ACTUALIZAR UNA CONDICIÓN EXISTENTE
CREATE OR REPLACE PROCEDURE SP_CONDICION_ACTUALIZAR(
    p_idCondicion   IN CONDICION.IDCONDICION%TYPE,
    p_descCondicion IN CONDICION.DESCCONDICION%TYPE
) IS
    falta_parametros EXCEPTION;
    condicion_no_existe EXCEPTION;
BEGIN
    -- Validar que los parámetros no sean nulos
    IF p_idCondicion IS NULL OR p_descCondicion IS NULL OR TRIM(p_descCondicion) IS NULL THEN
        RAISE falta_parametros;
    END IF;
    
    -- Verificar si la condición existe
    IF REGISTRO_EXISTE_ID('CONDICION', 'IDCONDICION', p_idCondicion) = 0 THEN
        RAISE condicion_no_existe;
    END IF;
    
    -- Actualizar la condición
    UPDATE CONDICION
    SET DESCCONDICION = TRIM(p_descCondicion)
    WHERE IDCONDICION = p_idCondicion;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE condicion_no_existe;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('✅ Condición actualizada exitosamente.');
EXCEPTION
    WHEN falta_parametros THEN
        DBMS_OUTPUT.PUT_LINE('Error: La descripción de la condición no puede estar vacía.');
    WHEN condicion_no_existe THEN
        DBMS_OUTPUT.PUT_LINE('Error: La condición con ID ' || p_idCondicion || ' no existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar la condición: ' || SQLERRM);
END SP_CONDICION_ACTUALIZAR;
/

-- PROCEDIMIENTO PARA ELIMINAR UNA CONDICIÓN
CREATE OR REPLACE PROCEDURE SP_CONDICION_ELIMINAR(
    p_idCondicion IN CONDICION.IDCONDICION%TYPE
) IS
    id_null EXCEPTION;
    condicion_no_existe EXCEPTION;
    verificar_eliminacion EXCEPTION;
BEGIN
    -- Validar que el ID de la condición no sea NULL
    IF p_idCondicion IS NULL THEN
        RAISE id_null;
    END IF;
    
    -- Verificar si la condición existe
    IF REGISTRO_EXISTE_ID('CONDICION', 'IDCONDICION', p_idCondicion) = 0 THEN
        RAISE condicion_no_existe;
    END IF;
    
    -- Eliminar la condición
    DELETE FROM CONDICION WHERE IDCONDICION = p_idCondicion;
    
    -- Verificar si se eliminó correctamente
    IF SQL%ROWCOUNT = 0 THEN
        RAISE verificar_eliminacion;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('✅ Condición eliminada exitosamente.');
EXCEPTION
    WHEN id_null THEN
        DBMS_OUTPUT.PUT_LINE('Error: Debe proporcionar un ID de condición.');
    WHEN condicion_no_existe THEN
        DBMS_OUTPUT.PUT_LINE('Error: La condición con ID ' || p_idCondicion || ' no existe.');
    WHEN verificar_eliminacion THEN
        DBMS_OUTPUT.PUT_LINE('Error: No se pudo eliminar la condición. Vuelva a intentar.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado al eliminar la condición: ' || SQLERRM);
END SP_CONDICION_ELIMINAR;
/
-- PROCEDIMIENTO PARA LISTAR TODAS LAS PROVINCIAS
CREATE OR REPLACE PROCEDURE SP_PROVINCIA_LISTAR(p_cursor OUT SYS_REFCURSOR) IS 
BEGIN
    OPEN p_cursor FOR 
        SELECT IDPROVINCIA, DESCPROVINCIA, FECHAREGISTRO 
        FROM PROVINCIA;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('❌ Error al listar provincias: ' || SQLERRM);
END SP_PROVINCIA_LISTAR;
/

-- PROCEDIMIENTO PARA REGISTRAR UNA NUEVA PROVINCIA
CREATE OR REPLACE PROCEDURE SP_PROVINCIA_REGISTRAR(
    p_descProvincia IN PROVINCIA.DESCPROVINCIA%TYPE
) IS
BEGIN
    INSERT INTO PROVINCIA (DESCPROVINCIA, FECHAREGISTRO) 
    VALUES (TRIM(p_descProvincia), CURRENT_DATE);
    DBMS_OUTPUT.PUT_LINE('✅ Provincia registrada exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar la provincia: ' || SQLERRM);
END SP_PROVINCIA_REGISTRAR;
/

-- PROCEDIMIENTO PARA ACTUALIZAR UNA PROVINCIA
CREATE OR REPLACE PROCEDURE SP_PROVINCIA_ACTUALIZAR(
    p_idProvincia IN PROVINCIA.IDPROVINCIA%TYPE,
    p_descProvincia IN PROVINCIA.DESCPROVINCIA%TYPE
) IS
BEGIN
    UPDATE PROVINCIA
    SET DESCPROVINCIA = TRIM(p_descProvincia)
    WHERE IDPROVINCIA = p_idProvincia;
    DBMS_OUTPUT.PUT_LINE('✅ Provincia actualizada exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar la provincia: ' || SQLERRM);
END SP_PROVINCIA_ACTUALIZAR;
/

-- PROCEDIMIENTO PARA ELIMINAR UNA PROVINCIA
CREATE OR REPLACE PROCEDURE SP_PROVINCIA_ELIMINAR(
    p_idProvincia IN PROVINCIA.IDPROVINCIA%TYPE
) IS
BEGIN
    DELETE FROM PROVINCIA WHERE IDPROVINCIA = p_idProvincia;
    DBMS_OUTPUT.PUT_LINE('✅ Provincia eliminada exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar la provincia: ' || SQLERRM);
END SP_PROVINCIA_ELIMINAR;
/
-- PROCEDIMIENTO PARA LISTAR TODAS LAS SEDES
CREATE OR REPLACE PROCEDURE SP_SEDE_LISTAR(p_cursor OUT SYS_REFCURSOR) IS 
BEGIN
    OPEN p_cursor FOR 
        SELECT IDSEDE, DESCSEDE, FECHAREGISTRO 
        FROM SEDE;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('❌ Error al listar sedes: ' || SQLERRM);
END SP_SEDE_LISTAR;
/

-- PROCEDIMIENTO PARA REGISTRAR UNA NUEVA SEDE
CREATE OR REPLACE PROCEDURE SP_SEDE_REGISTRAR(
    p_descSede IN SEDE.DESCSEDE%TYPE
) IS
BEGIN
    INSERT INTO SEDE (DESCSEDE, FECHAREGISTRO) 
    VALUES (TRIM(p_descSede), CURRENT_DATE);
    DBMS_OUTPUT.PUT_LINE('✅ Sede registrada exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar la sede: ' || SQLERRM);
END SP_SEDE_REGISTRAR;
/

-- PROCEDIMIENTO PARA ACTUALIZAR UNA SEDE
CREATE OR REPLACE PROCEDURE SP_SEDE_ACTUALIZAR(
    p_idSede IN SEDE.IDSEDE%TYPE,
    p_descSede IN SEDE.DESCSEDE%TYPE
) IS
BEGIN
    UPDATE SEDE
    SET DESCSEDE = TRIM(p_descSede)
    WHERE IDSEDE = p_idSede;
    DBMS_OUTPUT.PUT_LINE('✅ Sede actualizada exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar la sede: ' || SQLERRM);
END SP_SEDE_ACTUALIZAR;
/

-- PROCEDIMIENTO PARA ELIMINAR UNA SEDE
CREATE OR REPLACE PROCEDURE SP_SEDE_ELIMINAR(
    p_idSede IN SEDE.IDSEDE%TYPE
) IS
BEGIN
    DELETE FROM SEDE WHERE IDSEDE = p_idSede;
    DBMS_OUTPUT.PUT_LINE('✅ Sede eliminada exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar la sede: ' || SQLERRM);
END SP_SEDE_ELIMINAR;
/
-- PROCEDIMIENTO PARA REGISTRAR UN NUEVO DISTRITO CON VALIDACIÓN
CREATE OR REPLACE PROCEDURE SP_DISTRITO_REGISTRAR(
    p_idProvincia IN DISTRITO.IDPROVINCIA%TYPE,
    p_descDistrito IN DISTRITO.DESCDISTRITO%TYPE
) IS
    provincia_no_existe EXCEPTION;
    v_errores VARCHAR2(500) := '';
BEGIN
    -- Validar que el idProvincia exista
    IF REGISTRO_EXISTE_ID('PROVINCIA', 'IDPROVINCIA', p_idProvincia) = 0 THEN
        v_errores := 'Error: La provincia con ID ' || p_idProvincia || ' no existe.';
        RAISE provincia_no_existe;
    END IF;

    -- Insertar nuevo distrito
    INSERT INTO DISTRITO (IDPROVINCIA, DESCDISTRITO, FECHAREGISTRO) 
    VALUES (p_idProvincia, TRIM(p_descDistrito), CURRENT_DATE);
    
    DBMS_OUTPUT.PUT_LINE('✅ Distrito registrado exitosamente.');

EXCEPTION
    WHEN provincia_no_existe THEN
        DBMS_OUTPUT.PUT_LINE(v_errores);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar el distrito: ' || SQLERRM);
END SP_DISTRITO_REGISTRAR;
/

-- PROCEDIMIENTO PARA ACTUALIZAR UN DISTRITO CON VALIDACIÓN
CREATE OR REPLACE PROCEDURE SP_DISTRITO_ACTUALIZAR(
    p_idDistrito IN DISTRITO.IDDISTRITO%TYPE,
    p_idProvincia IN DISTRITO.IDPROVINCIA%TYPE,
    p_descDistrito IN DISTRITO.DESCDISTRITO%TYPE
) IS
    distrito_no_existe EXCEPTION;
    provincia_no_existe EXCEPTION;
    v_errores VARCHAR2(500) := '';
BEGIN
    -- Validar que el distrito exista
    IF REGISTRO_EXISTE_ID('DISTRITO', 'IDDISTRITO', p_idDistrito) = 0 THEN
        v_errores := 'Error: El distrito con ID ' || p_idDistrito || ' no existe.';
        RAISE distrito_no_existe;
    END IF;

    -- Validar que el idProvincia exista
    IF REGISTRO_EXISTE_ID('PROVINCIA', 'IDPROVINCIA', p_idProvincia) = 0 THEN
        v_errores := 'Error: La provincia con ID ' || p_idProvincia || ' no existe.';
        RAISE provincia_no_existe;
    END IF;

    -- Actualizar el distrito
    UPDATE DISTRITO
    SET IDPROVINCIA = p_idProvincia,
        DESCDISTRITO = TRIM(p_descDistrito)
    WHERE IDDISTRITO = p_idDistrito;

    DBMS_OUTPUT.PUT_LINE('✅ Distrito actualizado exitosamente.');

EXCEPTION
    WHEN distrito_no_existe THEN
        DBMS_OUTPUT.PUT_LINE(v_errores);
    WHEN provincia_no_existe THEN
        DBMS_OUTPUT.PUT_LINE(v_errores);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar el distrito: ' || SQLERRM);
END SP_DISTRITO_ACTUALIZAR;
/
-- PROCEDIMIENTO PARA ELIMINAR UN DISTRITO
CREATE OR REPLACE PROCEDURE SP_DISTRITO_ELIMINAR(
    p_idDistrito IN DISTRITO.IDDISTRITO%TYPE
) IS
BEGIN
    DELETE FROM DISTRITO WHERE IDDISTRITO = p_idDistrito;
    DBMS_OUTPUT.PUT_LINE('✅ Distrito eliminado exitosamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar el distrito: ' || SQLERRM);
END SP_DISTRITO_ELIMINAR;
/
-- PROCEDIMIENTO PARA LISTAR TODOS LOS DISTRITOS
CREATE OR REPLACE PROCEDURE SP_DISTRITO_LISTAR(p_cursor OUT SYS_REFCURSOR) IS 
BEGIN
    OPEN p_cursor FOR 
        SELECT 
        d.IDDISTRITO,
        p.DESCPROVINCIA AS PROVINCIA,
        d.DESCDISTRITO,
        d.FECHAREGISTRO 
        FROM DISTRITO d
        JOIN PROVINCIA p ON d.IDPROVINCIA = P.IDPROVINCIA;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('❌ Error al listar distritos: ' || SQLERRM);
END SP_DISTRITO_LISTAR;
/
